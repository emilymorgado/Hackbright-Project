1|monster|monster@mon.com|password|Fuzzy|Monster|0||I am a super cool monster
2|monster|monster@mon.com|password|Fuzzy|Monster|0||I am a super cool monster
3|Rafa|rafa@prof.com|senha|Rafael|Oliveira|1||Sou profesor de portugues e fico em sao francisco desde ano passado
4|Sandra|Sandra@arroba.com|senah|Sanda|Carvalho|1||no
sqlite> SELECT * FROM users;  


  <title>Class Info</title>
  <meta charset=utf-8/>

  <!-- Connects to jquery. Not sure I need this right now -->
  <script src="https://code.jquery.com/jquery.js"></script>

for server.py
check_login():
could also do the following:

    form_email = request.form.get("email")
    form_password = request.form.get("password")

    if email and password:
    u = User.query.filter_by(email=form_emailb.filter_by(password=form_password).all()

    if u and len(u) == 1:
        return render_template('profile.html')

# this looks for 1 item in the list returned from the db via .all()

    else:
    flash("That email and password combo doesn't exist")
 

This should probably be in the base.html
{% with messages = get_flashed_messages() %}

can also do

{% for monkey in my_messages %}


sessions are dictionaries!

in server.py
@app.route("/profile")
    current_user = session.get('ser_id')
    if current_user:
        u = User.query.get(current_user)
        return render_template(login.html)
    else

This has bugs!



!!!!!USE a CALENDAR PICKER for the START and END_DATES!!!!!



class_id|language|level|cost|min_students|max_students|latitude|longitude|class_days|start_date|end_date|time

user_id|username|email|password|f_name|l_name|is_teacher|image|bio


Where does this fit in?
    {% block title % }Create a Class {% endblock %}




    sqlite> SELECT * FROM users;
sqlite> INSERT INTO users VALUES (1, 'monster', 'monster@mon.com', 'password', 'Fuzzy', 'Monster', 0, NULL, 'I am a super cool monster');
sqlite> SELECT * FROM users;
1|monster|monster@mon.com|password|Fuzzy|Monster|0||I am a super cool monster
sqlite> 





*Classes*​
   class_id*  INTEGER PRIMARY KEY AUTOINCREMENT
   language -fk(Languages)  Not Null
   start_date  Not Null
   end_date
   times
   cost
   min_students  Not Null
   max_students
   map

CREATE TABLE Classes(
class_id INTEGER PRIMARY KEY AUTOINCREMENT,
language VARCHAR(40) NOT NULL,
cost REAL,
min_students INTEGER NOT NULL,
max_students INTEGER NOT NULL,
mapbox VARCHAR(100)
);

​*Users*​
   user_id* -fk(Purpose)
   f_name
   l_name  Not Null
   img
   bio
   class_id -FK

CREATE TABLE Users(
user_id INTEGER PRIMARY KEY AUTOINCREMENT,
email VARCHAR(100) NOT NULL,
f_name VARCHAR(60),
l_name VARCHAR(100),
image VARCHAR(100),
bio VARCHAR(300),
class_id INTEGER
);





(let's add start_date, end_date, times to this to prevent double booking)

CREATE TABLE Days(
class_id INTEGER PRIMARY KEY,
Monday BOOLEAN,
Tuesday BOOLEAN,
Wednesday BOOLEAN,
Thursday BOOLEAN,
Friday BOOLEAN,
Saturday BOOLEAN,
Sunday BOOLEAN
);
 

-Classes have many People (Student Roles + Teacher Role)
-Classes have one Teacher Role
-Classes can have many days (Ex: T, Th). Do you think this will be an issue since it’s a field?
-Classes have one Language

-People can have many Classes
-People can have many Languages
-People have one Role (either Teacher or Student)

-Roles are only linked to People

-Languages are linked to Classes
-Languages are linked to People




as long as you have a seed file, yo can drop your tables and easily recreate them

Put a print statement in Server to see if yoru Post/Get really posted/got

\n\n\n\n to give space to make print statement easy to find

print request.args

Do this in server.py and look at the server bash for print statements

make them big, fun, and clear!

if request.method == "GET":
    print "\n\nGOT GET"

